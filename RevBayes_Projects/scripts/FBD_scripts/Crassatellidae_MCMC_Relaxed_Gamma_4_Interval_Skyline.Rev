clear();
working_directory <- getwd()+"/Documents/RevBayes_Projects";
setwd(working_directory);
### This director needs three subdirectories (folders):
#     RevBayes_Projects/scripts (additional RevBayes routines that will be used)
#     RevBayes_Projects/data (holds data matrices & taxonomic information)
#     RevBayes_Projects/output (where trees & logs will be sent)
source("scripts/Milgram_Default_Settings.Rev");

###############################################################################
# This is (these are) the nexus file(s) that you are using for this analysis  #
#     Make sure that filenames & directories are correct!!!
###############################################################################
filenames <- v("data/Crassatellidae_Matrix_2_States.nex", "data/Crassatellidae_Matrix_3_States.nex", "data/Crassatellidae_Matrix_4_States.nex");

partition_chars <- v(28,10,4);
partition_states <- v(2,3,4);
partition_ordering <- v("unordered","unordered","unordered");
coding_bias <- v("variable","variable","variable");	## prepare for ascertainment bias in binary characters; 'all': invariant & autapomorphies present; 'variable': all vary & autapomorphies present; 'informative': all vary & no autapomorphies.
max_age <- 60.6;						# used if big_bang==TRUE;
clock_model <- "uncorrelated";		# enter "strict" for strict clock, "uncorrelated" for relaxed clock with lognormal; "autocorrelated" for autocorrelated with lognormal shifts

outgroup = clade("Crassatella_hodgei");
ingroup = clade("Crassatella_vadosa","Crassatella_carolinensis","Crassatella_tumidula","Crassatella_aquiana","Spissatella_trailli","Scambula_perplana","Bathytormus_pteropsis","Bathytormus_alaeformis","Bathytormus_protextus","Bathytormus_clarkensis");
among_char_var <- "gamma";	# enter "gamma" or "lognormal"

############################################################################
#                  Get basic information about the clade                   #
############################################################################
n_data_subsets <- filenames.size();
taxa <- readTaxonData(file="data/crassatellidae_fossil_intervals.tsv");
n_taxa <- taxa.size();
n_branches <- (2 * n_taxa) - 2;

############################################################################
# Set up appropriate parameters for speciation, extinction & sampling.     #
#      We also set up the tree search here.                                #
#                                                                          #
# NOTE: This will sometimes freeze; if it does, then edit the script so    #
#      origination & extinction are set to 1.0. This usually works!        #
############################################################################
moves = VectorMoves();
source("scripts/Accersi_Crassatellidae_FBD_Skyline_4_Interval.Rev");

############################################################################
# Set up appropriate Q-matrices for the partitions
#   as well as the among-character and among-branch
#   rate variation models
#  (Again, make sure that the directory is OK)
############################################################################
source("scripts/Accersi_Parameters_for_Analysis_Partitioned_by_States_and_Ordering_and_Class.Rev");

############################################################################
# Wrap it all into your model
############################################################################
#mymodel = model(tau);		# tau should have FBD & character evolution models attached to it
mymodel = model(fbd_tree);		# fbd_tree should have FBD & character evolution models attached to it

############################################################################
# Add monitors & commence MCMC'ing
#  (Again, make sure that the source directory is OK)
# NOTE: the program saves trees once every printgen generations; so, the
#   lower the number, the more trees you save.
############################################################################
output_file = "output/crassatellidae_" + among_char_var + "_char_variation_" + clock_model;
if (clock_model!="strict") output_file = output_file + "_relaxed";
output_file = output_file + "_clock";
if (rate_partitions.size()>1)   output_file = output_file + "_" + "_char_rate_partitions_";
if (bins>1)	output_file = output_file + "_" + bins + "_bin_skyline";
filename1 = output_file + ".log";
filename2 = output_file + "_MCMC.trees";

monitors = VectorMonitors();
## alter the file names to better reflect the analysis (e.g., nimravinae_strict_clock.log and nimravinae_strict_clock.trees)
monitors.append(mnModel(filename=filename1, printgen=10));
monitors.append(mnFile(fbd_tree, filename=filename2,printgen=10,separator=TAB,fbd_tree));
if (among_char_var=="uniform") {
 monitors.append(mnScreen(printgen=500,mean_rt,fbd_p,fbd_q,fbd_r,summed_gaps,num_samp_anc,origin_time));
 } else {
 monitors.append(mnScreen(printgen=500,mean_rt,alpha,fbd_p,fbd_q,fbd_r,summed_gaps,num_samp_anc,origin_time));
 }

#### MCMC Settings
no_runs=3;		# Number of independent MCMC analyses. (Even MCMC can get stuck in local optima!)
burnin_gens=10000;	# Number of generations for the burnin pre-analysis (to tune parameters).
tuning_int=200;		# Frequency at which burnin analysis will tune parameters (in generations).
running_gens=1000000;	# Number of generations for the real analysis; the bigger the analysis, the more you usually need.

# Now, go read Anna Karenina.....
source("scripts/Expecto_MCMC_with_Partitioned_Characters.Rev");

for (i in 1:no_runs)  {
  tree_files[i] <- output_file + "_MCMC_run_" +i + ".tree";
  maj_rule_files[i] <- output_file + "_run_" +i + "_maj_rule.tre";
  most_probable_files[i] <- output_file + "_run_" +i + "_simple_map.tre";
  }

source("scripts/Accersi_Consensus_Tree.Rev");

source("scripts/Accersi_Most_Probable_Tree.Rev");
