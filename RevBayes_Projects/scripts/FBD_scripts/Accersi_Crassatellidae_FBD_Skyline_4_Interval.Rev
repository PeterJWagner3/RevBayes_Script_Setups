########################################################################
# Set up appropriate parameters for speciation, extinction & sampling #
# "Seed" numbers based on analyses of Paleobiology Database data. #
########################################################################
timeline <- v(38.6, 43.0, 49.1); # post-Danian/Danian/Maastrichtian/Pre-Maastrichtian
sampling <- v(1.83,1.33,1.40,1.64) # post-Danian/Danian/Maastrichtian/Pre-Maastrichtian
# Initial Diversification Rates based on Meso-Cenozoic Bivalvia
bins <- timeline.size()+1
for (i in 1:bins) {
# print(i);
 cladogenesis_rate[i] ~ dnExponential(1/0.573);
 fbd_p[i]:=cladogenesis_rate[i];
 moves.append(mvScale(cladogenesis_rate[i], lambda=0.01, weight=5));
 moves.append(mvScale(cladogenesis_rate[i], lambda=0.10, weight=3));
 moves.append(mvScale(cladogenesis_rate[i], lambda=1.00, weight=1));

 turnover[i] ~ dnLognormal(0.945, 1.926745);

 moves.append(mvSlide(turnover[i], delta=0.01, weight=5));
 moves.append(mvSlide(turnover[i], delta=0.10, weight=3));
 moves.append(mvSlide(turnover[i], delta=1.00, weight=1));
 fbd_q[i]:=extinction_rate[i]:= turnover[i]*cladogenesis_rate[i];
 diversification[i] := cladogenesis_rate[i] - extinction_rate[i];

# Fossil Sampling Rates based on rocks and sites averaged occupied by Meso-Cenozoic Bivalvia
 psi[i] ~ dnExponential(sampling[i]);
 moves.append(mvScale(psi[i], lambda=0.01, weight=5));
 moves.append(mvScale(psi[i], lambda=0.10, weight=3));
 moves.append(mvScale(psi[i], lambda=1.00, weight=1));
 completeness[i] := psi[i]/(extinction_rate[i]+psi[i]);
 fbd_r[i]:=psi[i];
 } # end skyline loops

# Proportional Taxon Sampling of Youngest Time Slice
rho <- 0.2; # 'extant' sampling.

# Establish Basal Divergence Time
origin_time ~ dnUnif(60.70,65.7);
moves.append(mvSlide(origin_time, delta=0.01, weight=5));
moves.append(mvSlide(origin_time, delta=0.10, weight=3));
moves.append(mvSlide(origin_time, delta=1.00, weight=1));

fbd_dist = dnFBDP(originAge=origin_time, lambda=cladogenesis_rate, mu=extinction_rate, psi=psi, rho=rho, timeline=timeline, taxa=taxa, condition="sampling");

#fbd_dist = dnFBDRP(origin=origin_time, lambda=cladogenesis_rate, mu=extinction_rate, psi=psi, rho=rho, taxa=taxa);
############################################################################
# Set up tree #
############################################################################
# create the vector of clade constraints
constraints = v(ingroup);
fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints=constraints);
#fbd_tree ~ dnConstrainedTopology(fbd_dist);
#tau ~ dnConstrainedTopology(fbd_dist,constraints=constraints);

moves.append(mvFNPR(fbd_tree, weight=n_branches/2)); # time-tree pruning & grafting
moves.append(mvNNI(fbd_tree, weight=n_branches/2)); # nearest-neighbor interchanges
moves.append(mvCollapseExpandFossilBranch(fbd_tree,origin_time,weight=n_taxa/4)); # consider ancestor-descendant rather than sister species
moves.append(mvNodeTimeSlideUniform(fbd_tree, weight=n_branches/2)); # adjust divergence times
moves.append(mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5)); # adjust basaldivergence time.

num_samp_anc := fbd_tree.numSampledAncestors();
for (bn in 1:n_branches) {
 divergence_dates[bn]:=fbd_tree.nodeAge(bn) # this is when a hypothesized ancestor diverges or an OTU is first seen;
 branch_lengths[bn]:=fbd_tree.branchLength(bn); # this is branch *duration* not expected change!
 origin_dates[bn]:=fbd_tree.branchLength(bn)+fbd_tree.nodeAge(bn); # this is when a lineage diverged from its ancestor
 }
summed_gaps := sum(branch_lengths);
#fbd_tree:=tau;
clade_extant = clade("Spissatella_trailli");
age_extant := tmrca(fbd_tree, clade_extant); # There is no particularly good reason to keep this!
